generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  FREELANCER
  BUSINESS
  NGO
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  isFulfilled   Boolean       @default(false)
  type          UserType?
  tags          String[]      @default([])
  image         String?
  description   String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  faqQuestions  FaqQuestion[]
  accounts      Account[]
  Token         Token[]
  ChatMessagesSent     ChatMessage[] @relation("Sender")
  ChatMessagesReceived ChatMessage[] @relation("Receiver")
}

enum ChatMessageType {
  TEXT
  CONTRACT
}

model ChatMessage {
  id         String          @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  type       ChatMessageType @default(TEXT)
  createdAt  DateTime        @default(now())
  Contract   Contract?

  sender   User @relation(name: "Sender", fields: [senderId], references: [id])
  receiver User @relation(name: "Receiver", fields: [receiverId], references: [id])
}

enum ContractStatus {
  PENDING
  ACCEPTED
  REJECTED
  MONEY_SENT
  DECLARED_COMPLETE
  PAID
  SUBMITTED_TO_THE_COURT
}

model Contract {
  id        String         @id @default(cuid())
  messageId String         @unique
  status    ContractStatus @default(PENDING)
  amount    Float
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  message ChatMessage @relation(fields: [messageId], references: [id])
}

model FaqQuestion {
  id       String  @id @default(cuid())
  userId   String
  question String
  answer   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Token {
  id      String    @id @default(cuid())
  userId  String
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type    TokenType
  token   String    @unique
  expires DateTime

  @@unique([userId, token, type])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}
